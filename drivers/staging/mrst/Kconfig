#
# Drm device configuration
#
# This driver provides support for the
# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.
#

config DRM_INTEL_MID
	tristate "Intel Moorestown/Medfield (load along with IMG driver)"
	depends on DRM && PCI
	select FB_CFB_COPYAREA
        select FB_CFB_FILLRECT
        select FB_CFB_IMAGEBLIT
        select DRM_KMS_HELPER
        select DRM_TTM
	help
	  xxxxxxxxxxxxxxxxxxxxxxxxxx

choice
	prompt "PVR ABI version"
	depends on DRM_INTEL_MID
	default PVR_ABI_RELEASE

config PVR_ABI_RELEASE
	bool "Release ABI"
	depends on DRM_INTEL_MID
	help
	  Select release mode for the IOCTL and firmware ABI. Note
	  that this will work only with the PVR user space libraries
	  built with the release mode ABI option too.


config PVR_ABI_DEBUG
	bool "Debug ABI"
	depends on DRM_INTEL_MID
	help
	  Select debug mode for the IOCTL and firmware ABI. This will
	  enable extra debugging options with the help of the user space
	  libraries, like PDUMP (PDUMP needs to be enabled separately).

	  Note that this will work only with the PVR user space libraries
	  built with the debug mode ABI option too.

endchoice

config PVR_DEBUG
	bool "PVR debug messages/asserts"
	depends on DRM_INTEL_MID
	help
	  Enable debug messages and asserts.

config DRM_MDFLD
	tristate "Intel Medfield"
        depends on DRM_INTEL_MID && PCI
        select FB_CFB_COPYAREA
        select FB_CFB_FILLRECT
        select FB_CFB_IMAGEBLIT
        select DRM_KMS_HELPER
        help
          Choose this option if you have a Medfield platform.
          If M is selected the module will be called mid_gfx.

config MDFLD_DSI_DSR
	bool "Support DSI Fullscreen Display Self Refreshment "
	depends on DRM_MDFLD && !MDFLD_DSI_DPU
	default y
	help
	  Choose this option if you have a Type1 MIPI panel.

config MDFLD_DSI_DPU
	bool "Support DSI Display Partial Update"
	depends on DRM_MDFLD
	default n
	help
	  xxxxxx

config MDFD_DUAL_MIPI
        bool "SUPPORT_DUAL_MIPI_DISPLAYS"
        depends on DRM_MDFLD
        default n
        help
          xxxxxx

config MDFD_HDMI
        bool "SUPPORT_HDMI_DISPLAY"
        depends on DRM_MDFLD
        default n
        help
          xxxxxx

choice
	  prompt "HDMI board support"
	  depends on MDFD_HDMI
	  default MDFD_HDMI_REDRIDGE

config MDFD_HDMI_GREENRIDGE
	  bool "Greenridge HDMI support"
	  depends on MDFD_HDMI
	  help
	    HDMI support for Greenridge.

config MDFD_HDMI_REDRIDGE
	  bool "Red Ridge HDMI support"
	  depends on MDFD_HDMI
	  help
	    HDMI support for Red Ridge.

config MDFD_HDMI_PR2
	  bool "PR2 HDMI support"
	  depends on MDFD_HDMI
	  help
	    HDMI support for PR2.

endchoice

config MDFD_GL3
	bool "Enable GL3 Cache for GUNIT"
	depends on DRM_MDFLD
	default n
	help
	  xxxxxx

config PVR_TRACE_CMD
	depends on DRM_INTEL_MID
	bool "Enable GPU command tracing"
	default n
	help
	  This will enable a lightweight tracer of commands submitted
	  to the GPU.

	  Besides the command type the trace output will provide the
	  timestamp, id and name of the submitting process and a
	  a snapshots of the synchronization counters related to the
	  given command.

	  The trace can help for example in debugging dead-lock
	  situations caused by circular lock dependencies.

config PVR_TRACE_CMD_BUF_SHIFT
	int "Command tracing buf size"
	range 1 10
	default 3
	depends on PVR_TRACE_CMD
	help
	  Select the number of pages (as a power of 2) set aside for
	  the command trace buffer.
	  Examples:
	  1  -> 4kB
	  3  -> 32kB
	  10 -> 4MB

config PVR_TRACE_FW_DUMP_TO_CONSOLE
	bool "Dump firmware trace to console in case of SGX HW recovery"
	default n
	help
	  Answer y, if you want the firmware trace to be dumped to the
	  console automatically, in case of an SGX HW recovery. Note that
	  for this, you need a PVR user space library (and the firmware
	  within that) built with tracing enabled. The same trace is also
	  available through the firmware_trace PVR debugfs entry.
